---
django high level:
  client side (browser) 
    -> makes a url request 
    -> network stuff
    -> server recives the request
      -> django service processes the requested url:
        -> file: urls.py
          this urls.py file is mapped via a 'call' to a views.py file
          -> file: views.py
            the views.py file contains call(s) to models.py file
            -> file: models.py
              the models.py file has a connection to the database platform
              <-> service: SQLite, postgresql, etc. as defined by the app driver being used
                -> the connection and sql statement is evaluated
                <- data is returned
            <- file: models.py
               data is loaded into an object model
          <- file: views.py
            constructs the layout of the requested url
          
          <- files: Frontend
            - Templates:
            - HTML: reference ./html_basics
            - CSS: reference ./css_basics
            - Javascript: reference ./dom/basics ./java_scripts

Command Line:
  skipped...

Python:
  install:
    He's recommending miniconda 4.3.0 with python 3.6 version.

    I'm going to use vagrant with just python 3.6

  why is python a dynamic language:
  
  Comments:
      # this is a comment

  numbers:
    integers
    floating point
    math functions:
      + addition
      - substraction
      * multiplication
      / division
      ** powers where power is >= 1
      ** square root is where < 1

    order of operations are followed: () * / + - 

    assignments:
      a = value

  strings:
    rules:
      strings are immutable
        so trying to item assignments like
          # this is a TypeError: 'str' object does not support item assignment
          my_string[0]='x'
    formats:
      "hello"
      'hello'
      "I'm a dog"
    
    Indexing:    
      my_string = "a value"
      print( my_string )     # out: a value
      print( my_string[1] )  # out: a
      print( my_string[-1] ) # out: e

    Slicing:
      my_string = 'a nother value'
      print( my_string )     # out: a nother value
      print( my_string[3:] ) # out: other value
      # up to but not including
      print( my_string[:3] ) # out: a n
      print( my_string[3:8] ) # out: other

      # step size
      print( my_string[:] ) # out: a nother value
      print( my_string[::1] ) # out: a nother value
      print( my_string[::2] ) # out: ante au

    Methods:
      my_string = 'and yet another value'
      # see the metadata available for the my_string 'str' object
      dir( my_string )

      print( my_string.upper() )        # out: AND YET ANOTHER VALUE
      print( my_string.lower() )        # out: and yet another value
      print( my_string.capitalize() )   # out: And yet another value

      print( my_string.split() )    # out: a list ['and','yet','another','value']  defaults to whitespace
      print( my_string.split('e') ) # out: a list 

    Formating:
      # using interpulation
      "a string with a value to be inserted here: {}".format("inserted baby!")
      "a string list here: ['{}','{}','{}','{}']".format("inserted baby!","he","is","awesome")
      "{a} {b} {c} are all the people.".format(a='bob',b='sue',c='ted')
  lists:
    # an a array
    a = ['a','b','c']
    # lists are muteable
    Methods:
      a.append( object )  # out will be [ 'a','b','c', object ]

      say object is a list b = ['e','f']
      with append a[4] will be the list ['e','f']

      a.extend( b )
      this will add each element of b onto list a
      so a[4] will be 'e'

    list comprehencion:
      x = [['a','b','c'],['d','e','f'],['g','h','i']]
      col_two_values = [ row[1] for row in x ]   # so for all elements in x take the 2nd item and make a list

  dictionary:
    # like the hash table in javascript, mappings of key value pairs
    # there is no order
    # functions can't be added to dictionaries like they are in js

  tuples:
    are immutable sequences once set can't be changed?
    t = (1,2,3)
    t[0]=4
    # Traceback (most recent call last):
    # File "<stdin>", line 1, in <module>
    # TypeError: 'tuple' object does not support item assignment
    Methods:
      dir(t)
      - dunder Methods +
      - index
      - count
  sets:
    unordered collections of unique elements
    b = (1,2,1,2,3)
    x = set()
    set(b)      # out: set([1, 2, 3])

  booleans:
    are just true and false as before
    - True
    - False

Control Flow:
  - operators:
    assignments:
      - a variable becomes a type with value(s) using the '=' syntax
      - variable types determine if the values can be overwritten
          - muteable or immutable
    Comparisons:
      - greater than, 1 > 2   # False
      - less than, 1 < 2      # True
      - greater than or equal to, 1 >= 1 # True
      - less than or equal to, 1 <= 4  # True
      - equality, 1 == 1   # True
        - 1 == "1"  # False
        - 1 == int("1")  # True
        - 'hi' == 'bye'  # False
      - not equales or inequality, 1 != 1   #False
    Logical:
      - and
        ( 1 > 2 ) and (2 < 3)  # False
      - or
        ( 1 > 2 ) and (2 < 3)  # True
      - chained or's and and's, order of operations matters
        ( 1 > 2 ) and (2 < 3) or ( 2 != 3 )  # True
        ( 1 > 2 ) and ((2 < 3) or ( 2 != 3 ))  # False
  - if/else:
    - if
      if condition(s):
        code_block_when_true
    - if else
      if condition(s):
        true_code_block
      else:
        else_code_block

    - if else if else
      if condition(s):
        true_code_block
      elif condition(s):
        true_code_block
      else:
        else_code_block
  - loops:
    - for
      for item in iterable:
        item_code_block
      OR
      for iter in obj.__iter__:
        NOTE: * iterable objects have the __iter__ method 
          like lists, dictionaries, tutles, sets


    - while
      while condition:
        true_code_block

    - range
      range(start,stop[,step]):
        - default start is 0, so
        - range(5) # range(0,5)

      range()
      range is a generator:
        - reason for this is to conserve memory
        - using ranges to multi thread
            list(range(0+0,99,4))
            list(range(0+1,99,4))
            list(range(0+2,99,4))
            list(range(0+3,99,4))
          list(range(99)) == 
                set(list(range(0+0,99,4)))
                  .union(list(range(0+1,99,4)))
                  .union(list(range(0+2,99,4)))
                  .union(list(range(0+3,99,4)))
    - list comprehension
      mechanics:
        [ item[+ stuff] for item in obj.__iter__ [if condition(s)] ]
        # out: would be a list of items with + stuff where conditions are true
        # the catches, obj.__iter__ return type must be compatible with + stuff and if condition

functions:
  - 'def' keyword defines functions

  main usage: dont repeat yourself
    pep: 
      - snake case
      - must start with letter, plus other rules


  functions:
    - consist of a:
      - def keyword
      - a name 
      - ( and optional args )
      - followed by a ':'
      - optional docstring aligned with the functions_code_block
      - functions_code_block
      - optional return statement

    - syntax
    def my_function(param1='param1_default',param2):
      """
        docstring_text_block
      """
      functions_code_block


    - to access the function you have to import the file 
        which contains the function or it has to be local to the file
        order can matter.
    my_function()

  lambda:
    - a type of function, kinda of a skinny function
    - also called 'ananamous function'

    example with the filter function:
      mylist=[1,2,4,3,5,6,7]

      def even_bool(num):
        return num%2 == 0

      print( filter( even_bool, mylist ) )    
      # out: a generator object, as a filter object
      print( list(filter(evaluated, mylist))) 
      # out: list of even ints

    take above example and make it lambda:
      # we are replacing the def even_bool(num):
      lambda num:num%2 == 0

      usage:
        print( filter( lambda num:num%2 == 0, mylist) )

    what I think is going on here:
      lambda is a way of defining a simple behavior, called once

      consists of a:
        - lambda keyword
        - input parameters
        - a ":"
        - a single or simple expression using parameters

      example:
        lambda args : args[2].join(str(args[0]),args[1])


Scope:
  python builds a namespace to 'map' what variables have been defined
    and where they are.
  The following rule is the order that python follows to determine,
    the variables namespace
  - LEGB:
    - local:
        names within a function, lambda, without any global declarative keyword
    - enclosing function locals:
        name in the local scope of any and all enclosing functions (def or lamba)
          from inner to outer
        also functions within functions
    - global:
        a module variable, names assigned at the top level of a module file,
          or declared global in a def within the file with the global keyword
        it's recommended to avoid using global's, instead use return and assignment
    - built-in:
        at python (installed), names preassigned in the built-in names module;
          open, range, len, SyntaxError, etc...
        avoid overwriting these words.

  - scope examples:
    # 1
    x = 25  <- global
    def my_func():
      x = 50  <- local
      return x
    # 2
    lambda x: x**2   <- local
    # 3
    name = "global"
    def greet():
      name = "local"
      def hello():
        print("hello {}").format( name )
      hello()
    greet()
    print(name)
    # 4
    x = 20
    def my_func():
      global x   <- global
      x = 100
    print(x) # 20
    my_func()
    print(x) # 100

OOP:
  reference: ./oop.py

  every thing is an object in python

  mylist = [1,2,3]
  mylist <- is a class list, which has a bunch of methods, 
    use 'dir' to expose the class list interface

  classes have attributes and methods:
    - attributes are characterists of the object of type class
      - object attributes, set on initialization
      - class object attributes, are the same for ALL instances of the class
    - methods are opersations that can and will be preformed on the type class

